name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: portauthority.settings
      ALLOWED_HOSTS: 0.0.0.0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Lint with Black
        run: |
          poetry run black --check --diff .

      - name: Lint with Flake8
        run: |
          poetry run flake8 portauthority registry --show-source --statistics

      - name: Run Django system checks
        run: |
          poetry run python manage.py check --deploy

      - name: Run migrations check
        run: |
          poetry run python manage.py makemigrations --check --dry-run

      - name: Run tests with coverage
        run: |
          poetry run coverage run --source='.' manage.py test
          poetry run coverage report --show-missing
          poetry run coverage xml

      - name: Upload coverage reports to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.run_id }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-security-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run safety check
        run: |
          poetry run safety check --ignore 70612

      - name: Run bandit security scan
        run: |
          poetry run bandit -r . -x .venv,venv,env,.git

  deploy-ready:
    runs-on: ubuntu-latest
    needs: [ lint-and-test, security-scan ]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-deploy-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Collect static files
        env:
          DJANGO_SETTINGS_MODULE: portauthority.settings
          SECRET_KEY: 'github-actions-secret-key-for-testing'
          DEBUG: 'False'
        run: |
          poetry run python manage.py collectstatic --noinput

      - name: Create deployment artifact
        run: |
          tar -czf deployment.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='.venv' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.pytest_cache' \
            --exclude='coverage.xml' \
            --exclude='htmlcov' \
            --exclude='*.log' \
            .

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ github.run_id }}
          path: deployment.tar.gz
          retention-days: 7

  coverage-comment:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-${{ github.run_id }}

      - name: Comment coverage on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: coverage.xml
          message: |
            ## ðŸ“Š Coverage Report
            
            Coverage report has been generated and is available in the workflow artifacts.
            
            Run `poetry run coverage html` locally to generate detailed HTML coverage reports.

  docker-build:
    runs-on: ubuntu-latest
    needs: [ lint-and-test, security-scan ]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME_GHCR }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64, linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}